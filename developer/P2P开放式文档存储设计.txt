P2P开放式文档存储（DStore）
========================
- 存入系统的文档皆为确定性文件，不可修改；
- 因P2P的特性所致，文档为永久存储，无法删除；
- 原则上，所有文档为开放式可阅读源码文件，如果加密，应当被标注；



概要结构
========
	不同的文件类型对应其特有的概要字段，此为“文章”类型。
	字段：{
		type: "text/article,html"
		hash: 内容Hash校验串（兼文档索引）
		-----------------------------------------
		h1:  	 主标题
		h2: 	 副标题
		lang:    语言代码
		author:  作者
		rating:  内容分级（文化品）
		penname: 笔名
		stakeid: 权益地址
		time:    创建时间
		update:  最后更新时间
		cite:    来源 URL
		digest:  简介，可独立成文的内容概览
		copyright: 版权声明
		encrypted: 是否加密
	}
	注：
	- 概要与文章内容各自独立存储，增加灵活性和分散性；
	- 概要是内容的可阅读索引；


区块结构
========
	仅对文档概要的Hash标识进行存储，包含权益（存入券）、贡献值设计。


在线激励
========


循环结转
========
	对区块链进行周期性清算存档，权益结转，以控制当前在线数据的体量，保持节点轻量级运行。
	清算存档和权益结转后，旧的历史区块链可以被丢弃（临时性保留前一个周期的块链用于过渡）。

	断点
	----
	- 每隔2^16个区块进行一次文档索引的剥离，单独存储。权益进行结转；
	- 每个存储包含1k万个文档的索引，文件大小约380MB（末尾如果不超出10%，合并为一个文件）；
	  注：每个文档的索引存储包含时间戳（8字节）和Hash值（32字节）。
	- 如果每个区块包含1万个索引，则每次剥离后，断点集最大约24GB（~64*380MB）；
	- 如果每区块间隔10分钟，剥离间隔时间约为15个月；
	- 剥离时间起始点为每2^16个区块后第4096个区块时，4k延迟（约28天）用于区块成熟和节点剥离计算；
	- 断点数据会作为普通的文档进入系统P2P存储；
	- 所有断点存储文件的Hash值会存储在“结转区块”里，历史结转区块里的断点集被合并；
	  注：
	  > 系统所有存储中的全部断点集的“区块级索引”会一直存在，以便于对断点集文件本身的获取；
	  > 每个断点集文件数<=64，因此每次断点集索引增量<4kb，开销极小（且仅为结转块本身）；
	  > 历史结转区块与普通区块没有区别，剥离计算合并后也会被丢弃；

	权益结转
	--------
	- 文档索引剥离后，保留剥离前一个周期内的原始块链，用于权益结转验证；
	- 每个保留时期内的拥有权益的公钥需要执行一次转账，铸块或普通交易皆可；
	- 每个剥离周期后90天以后，客户端启动自动结转功能，只要客户端上线，会创建并发送一笔自转账交易（因此会产生交易费损失）；
	- 系统仅保留一个前周期的原始块链，再以前的块链丢弃，因此如果客户端一年内（15-3月）都没有上线，其公钥权益会丢失；
	- 公钥的贡献值也会随权益一起转移（或损失）；


与Timechain配合使用
====================
	本系统采用的区块链实现并不强调安全性，更注重公共“存储”所必要的设计。
	Timechain是一个存在性证明系统，如果出现时间点对你的文档很重要，你可以用本系统存储文件的Hash索引在那个系统中认证。

	本系统存储文件的概要里也有时间戳，但我们不保证该数值的绝对可靠。


无限存储
========
	- P2P方式下的存储，原理上是无限的。但需要构建一种可行的索引方式；
	- 以公钥Hash确定性构造本地存储文档的清单，当有相关文档Hash的请求时，本地即可响应；
	- 个体公钥的随机性保证网络整体存储的完备性（一定冗余程度，可靠性待研究/验证）；


冗余度
======
	- 6~10，即每一个文件在整个网络里至少有6-10份副本；
	- 系统应具有自我调整能力，如果达到下限会对外（客户端，人类）报警；




基本概念
========

	文档索引
	--------
	在P2P里，文档的索引指文档本身的Hash值，它们并不指向具体的存储位置，而是表达该文档存在。如果需要某文档，广播其索引即可。


	随机定点抽检
	------------
	上一区块的Hash值 + 随机确定性文件ID + 随机确定性文件内容片段（~100字节）
	+ 受检者公钥
	==> 受检Hash（用于验证受检者确实存储了该文档）


	延迟验证
	--------
	当检验者拥有目标文件时，再对受检者生成的Hash进行验证、放行。
	对于不在自己存储范围内的文件的抽检点，检验者无需关心（即内存中仅存部分受检Hash）。


	贡献值
	------
	节点在线的抽奖积累点数，用于衡量在线时间和存储贡献，是铸块权的重要参考。


	概要服务器
	----------
	当系统存储规模足够大之后，很难中心化提供全部文档的检索服务，此时可以仅集中文档的“概要”，然后从Hash索引向P2P网络及时请求。
	如果每个文件概要为1k，一个结转周期内满载的文件概要约640GB（6.4亿个文件）。



机制
====
	存储
	----
	- 按节点公钥计算存储的文档ID，即每个节点可以仅存储部分文档（当然也可为全节点）；
	- 假定公钥为随机分布，则文档的存储在整体上也是随机分布的；
	- 将文档存入系统需要创建存入交易，存入交易需要支付交易费；


	激励
	----
	- 系统采用实时在线抽奖方式激励挂机和存储；
	- 存储越多，能够参与抽奖的公钥就越多，中奖概率就越大；
	- 节点可对外提供“存入”服务，收取费用（永久存储）；
	- 节点可自行开展关于文档的增值服务；


	抽奖
	----
	- 实时抽奖是让节点保持活跃（在线）的关键措施；
	- 抽奖以上一区块的Hash值做随机数种子，确定性计算文档抽检点，各节点生成受检Hash，计算中奖概率并广播（太低就不必广播了）；
	  注：受检Hash值越小，中奖概率越高；参与抽奖的公钥需要有一定分值。
	- 如果中奖名额为10个，系统即取10个用于文件验算（抽检点），相当于每块分发10个贡献点；
	- 抽奖活动的有效时间截至新区块创建完毕——然后开始新的一轮；
	- 铸块节点收益20%归自己所有，80%用于奖金池积累；
	注：
	中奖名额按固定的曲线每年少量递增（直到某个限度），以适应不断增长的文件存储规模。
	  （10,12,14,16,19,22,25,29,33,38...）
	  // 起始值10，起始增长率 1.2，每2年降低一个百分点，直至增长率降为1。
	  // 最后结果：36年后停止增长，固定为256个


	中奖
	----
	- 中奖公钥记入当前区块，在兑奖之前无权再次参与抽奖，避免无实际文件节点创建虚假受检Hash；
	  注：如果让内容片段Hash可变，则欺骗者可以创建概率更高的受检Hash广播。


	延时兑奖
	--------
	- 兑奖由之后的铸块者验证受检Hash，如果无欺骗则签发兑奖。否则不予理睬；
	  注：颁奖交易的兑奖条件为铸块者签发同意和延时解冻（可能延时3个月才解冻释放公钥的抽奖权，以示惩戒）。
	- 被铸块者验证签发兑奖的中奖公钥同时获得“贡献值”；


	铸块
	----
	- 铸块共识由“贡献值”和“分值”（即币天数）共同计算衡量，大概各占50%权重；
	- 铸块成功后，公钥分值会被重置为0，重新积累天数。贡献值被减半；






文件类型
========
	例：type: "text/article,html"
	其中html为类型辅助说明，一般可用于表达实际文件的扩展名。

	text/
		article 	普通文章，一般由个人独立编写
		wiki 		维基类文档，经大众化修订，可能为html格式
		translation 译文，通常发文者不拥有原文版权
		html 		Html页面，也可用于其它类型的辅助说明（如：article,html）

	code/* 		程序代码，默认文本格式。如 code/go, code/javascript 或 code/js
	image/* 	图片类，一般按扩展名含义设定全名
	video/* 	视频类，名称设定同上
	audio/*  	音频类，名称设定同上
	sim/*    	仿真拟像类（simulacrum）
	xxdoc/* 	应用程序创建的自有格式文档，如.ppt, .odt, .tgz等






















